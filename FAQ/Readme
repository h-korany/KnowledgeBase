Setup:
1- Decompress FAQ.UI 
2- In command prompt Go to folder FAQ.UI and run npm install
3- Then run ng serve --o
4- Go to folder FAQ and open the solution and run it

Testing the Application:
1- Register a new user:
    Navigate to /register
    Create an account (try both employee and manager roles)
2- Login:
    Use the created credentials to login
3- Verify navigation works correctly
4- Test features:
  Create questions
  Add answers
  Test AI features (if logged in as manager)

Brief description of architecture & design choices:
1. Frontend Architecture (Angular)
    1.1.Standalone Components Approach
        Choice: Used Angular's modern standalone components instead of NgModules
        Benefit: Reduced boilerplate, faster loading
    1.2. Reactive Forms with Validation:
        Choice: Reactive forms over template-driven forms
        Benefit: More testable, complex validation scenarios, better TypeScript support
    1.3. Role-Based Access Control (RBAC):
        Choice: Implemented client-side role checks with server-side enforcement and hide advanced features (AI Assistant) from non-manager users
        Benefit: Better UX (hiding unavailable features), Cleaner UI, reduced cognitive load for basic users
    1.4. JWT Token Strategy
        Choice: JWT tokens with 24-hour expiration stored in localStorage
        Benefit: Stateless authentication, scalable, works well with SPAs 
2- Backend Architecture (.NET)
    2.1. Layered Clean Architecture:
    2.2. Identity Management:
        Choice: ASP.NET Core Identity for user management
        Benefit: easy role management, extensible
    2.3. RESTful API Design:
        Choice: RESTful endpoints with proper HTTP verbs          
        Benefit: Standardized, predictable, easy to consume
    2.4. Separation of Concerns:
        Clear layer boundaries
        Single responsibility principles
        Dependency injection throughout 
    2.5. Extension Points
        Role system ready for new permissions    
        AI features modular and separable
    2.6. Testing Preparedness
        Services are injectable and mockable
        Components use dependency injection 
